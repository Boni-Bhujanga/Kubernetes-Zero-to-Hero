ubuntu@ip-172-31-0-126:~$ history
    1  ls
    2  sudo apt update
    3  sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
    4  kubectl version --client
    5  curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    6  sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
    7  minikube start
    8  # Add Docker's official GPG key:
    9  sudo apt-get update
   10  sudo apt-get install ca-certificates curl
   11  sudo install -m 0755 -d /etc/apt/keyrings
   12  sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
   13  sudo chmod a+r /etc/apt/keyrings/docker.asc
   14  # Add the repository to Apt sources:
   15  echo   "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
   16    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" |   sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
   17  sudo apt-get update
   18  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
   19  sudo docker run hello-world
   20  minikube start
   21  sudo usermod -aG docker ubuntu
   22  minikube start
   23  exit
   24  minikube start
   25  kubectl get nodes
   26  vi pod.yml
   27  kubuctl create -f pod.yml
   28  kubectl create -f pod.yml
   29  kubectl get pods -o wide
   30  minikube ssh
   31  kubectl get pods
   32  kubectl get pods
   33  minikube ssh
   34  minikube start
   35  kubectl get pods -o wide
   36  kubectl get pods
   37  kubectl get deploy
   38  kubectl get all
   39  curl This is for people who don't understand "Replica Set":
   40  -> In k8s, there is a concept called controllers (we saw this in architecture video). The main work of controller is to watching the POD is running in desired state or not.
   41  -> If not it sends the message to scheduler to create a new resource to achieve the desired state.
   42  -> One of the controller is called "Deployment".
   43  ->  "Deployment" first creates "replica set(actual controller)" managed by "deployment" and replica set creates and manages the POD.
   44  ->  Still confusing see the bellow picture:
   45          +-----------------------------+
   46          |      Deployment       |
   47          | (desired state: 3)   |
   48          +-----------------------------+
   49                       |
   50                       | creates or updates
   51                       |
   52          +----------------------------+
   53          |      ReplicaSet        |
   54          | (desired state: 3)  |
   55          +----------------------------+
   56                       |
   57                       | creates or updates
   58                       |
   59          +----------------------+
   60          |         Pod          |  (POD -> execution environment for the containers)
   61          +----------------------+
   62                       |
   63                       | runs the containers
   64                       |
   65          +----------------------+
   66          |       Container  |
   67          +----------------------+
   68  vi pod.yml
   69  kubectl apply -f pod.yml
   70  minikube start
   71  kubectl get nodes
   72  kubectl apply -f pod.yml
   73  kubectl get pods -o wide
   74  minikube ssh
   75  kubectl get pods
   76  kubectl delete pod nginx
   77  minikube ssh
   78  vim deployment.yml
   79  kubectl create -f deployment.yml
   80  kubectl get deployment
   81  kubectl get pod
   82  kubectl get deploy
   83  kubectl get rs
   84  kubectl get pods - w
   85  kubectl get pods -w
   86  kubectl delete pod nginx-deployment-86dcfdf4c6-2kvmq
   87  kubectl get pods -w
   88  kubectl delete pod nginx-deployment-86dcfdf4c6-2kvmq
   89  kubectl get pods -w
   90  kubectl delete pod nginx-deployment-86dcfdf4c6-45hl8
   91  kubectl get pods -w
   92  kubectl delete pod nginx-deployment-86dcfdf4c6-45hl8
   93  vim deployment.yml
   94  kubectl apply -f deploymen.yml
   95  kubectl apply -f deployment.yml
   96  vim deployment.yml
   97  kubecl get pods
   98  kubectl get pod
   99  vi deployment.yml
  100  kubectl get rs
  101  kubectl get deploy
  102  kubectl delete pod nginx-deployment-86dcfdf4c6-str88
  103  kubectl get pods
  104  kubectl delete nginx-deployment-86dcfdf4c6-cf2nl
  105  kubectl get pods
  106  kubectl delete pod nginx-deployment-86dcfdf4c6-cf2nl
  107  kubectl get pods
  108  kubectl get pods -w
  109  kubectl delete pod nginx-deployment-86dcfdf4c6-c7w8q
  110  kubectl get pods -w
  111  vim deployment.yml
  112  kubecl get pods
  113  minikube start
  114  kubectl get pods -w
  115  kubectl delete pod nginx-deployment-86dcfdf4c6-g648p
  116  kubectl get pods -w
  117  kubectl get pods
  118  minikube status
  119  ls
  120  git clone https://github.com/Boni-Bhujanga/Docker-Zero-to-Hero.git
  121  ls
  122  cd Docker-Zero-to-Hero
  123  ls
  124  cd examples
  125  ls
  126  cd python-web-app/
  127  ls
  128  vi Dockerfile
  129  docket build -t bonibhujanga/python-sample-application-demo:v1 .
  130  sudo apt update
  131  sudo apt install docker.io -y
  132  sudo usermod -aG docker ubuntu
  133  exit
  134  docker run hello-world
  135  docker login
  136  docket build -t bonibhujanga/python-sample-application-demo:v1 .
  137  ls
  138  cd Docker-Zero-to-Hero
  139  cd examples
  140  cd python-web-app/
  141  ls
  142  docker build -t bonibhujanga/python-sample-app-demo:v1 .
  143  ls
  144  vim deployment.yml
  145  docker get image
  146  docker image
  147  vim deployment.yml
  148  kubectl apply -f deployment.yml
  149  vim deployment.yml
  150  kubectl apply -f deployment.yml
  151  vim deployment.yml
  152  kubectl apply -f deployment.yml
  153  vim deployment.yml
  154  kubectl apply -f deployment.yml
  155  vim dockerfile
  156  ls
  157  vi Dockerfile
  158  vim deployment.yml
  159  kubectl apply -f deployment.yml
  160  vi Dockerfile
  161  vim deployment.yml
  162  kubectl apply -f deployment.yml
  163  Client Version: version.Info{Major:"1", Minor:"15", GitVersion:"v1.20.2",
  164  vim deployment.yml
  165  kubectl apply -f deployment.yml
  166  vim deployment.yml
  167  kubectl apply -f deployment.yml
  168  vim deployment.yml
  169  sudo apt-get update && sudo apt-get install yamllint -y
  170  kubectl apply -f deployment.yml
  171  vim deployment.yml
  172  ls
  173  cd Docker-Zero-to-Hero
  174  cd examples
  175  cd python-web-app/
  176  ls
  177  rm dockerfile
  178  ls
  179  vi deployment.yml
  180  kubectl apply -f deployment.yml
  181  vi deployment.yml
  182  kubectl apply -f --validate=false deployment.yml
  183  docker imge
  184  docker image
  185  docker ps -a
  186  docker build -t bonibhujanga/python-sample-app-demo:v1 .
  187  vi deployment.yml
  188  docker ps -a
  189  kubectl apply -f deployment.yml
  190  kubectl apply -f --validate=false deployment.yml
  191  kubectl apply -h
  192  kubectl apply -f deployment.yml --validate=false
  193  vi deployment.yml
  194  cd Docker-Zero-to-Hero
  195  cd examples
  196  cd python-web-app/
  197  ls
  198  kubectl apply -f deployment.yml
  199  ls
  200  history





Welcome to Ubuntu 22.04.4 LTS (GNU/Linux 6.5.0-1014-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

  System information as of Mon Apr  1 19:18:07 UTC 2024

  System load:  0.4873046875      Processes:             117
  Usage of /:   20.4% of 7.57GB   Users logged in:       0
  Memory usage: 6%                IPv4 address for eth0: 172.31.0.126
  Swap usage:   0%

Expanded Security Maintenance for Applications is not enabled.

0 updates can be applied immediately.

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


The list of available updates is more than a week old.
To check for new updates run: sudo apt update


The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

To run a command as administrator (user "root"), use "sudo <command>".
See "man sudo_root" for details.

ubuntu@ip-172-31-0-126:~$ ls
ubuntu@ip-172-31-0-126:~$ sudo apt update
Hit:1 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy InRelease
Get:2 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates InRelease [119 kB]
Get:3 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports InRelease [109 kB]
Get:4 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 Packages [14.1 MB]
Get:5 http://security.ubuntu.com/ubuntu jammy-security InRelease [110 kB]           
Get:6 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/universe Translation-en [5652 kB]
Get:7 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 c-n-f Metadata [286 kB]
Get:8 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/multiverse amd64 Packages [217 kB]
Get:9 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/multiverse Translation-en [112 kB]
Get:10 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/multiverse amd64 c-n-f Metadata [8372 B]
Get:11 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [1518 kB]
Get:12 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/main Translation-en [293 kB]
Get:13 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [1644 kB]
Get:14 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/restricted Translation-en [274 kB]
Get:15 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1060 kB]
Get:16 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/universe Translation-en [241 kB]
Get:17 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/universe amd64 c-n-f Metadata [22.1 kB]
Get:18 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 Packages [49.6 kB]
Get:19 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/multiverse Translation-en [12.0 kB]
Get:20 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 c-n-f Metadata [472 B]
Get:21 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/main amd64 Packages [67.1 kB]
Get:22 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/main Translation-en [11.0 kB]
Get:23 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/main amd64 c-n-f Metadata [388 B]
Get:24 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/restricted amd64 c-n-f Metadata [116 B]
Get:25 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/universe amd64 Packages [28.4 kB]
Get:26 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/universe Translation-en [16.2 kB]
Get:27 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/universe amd64 c-n-f Metadata [644 B]
Get:28 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports/multiverse amd64 c-n-f Metadata [116 B]
Get:29 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [1303 kB]      
Get:30 http://security.ubuntu.com/ubuntu jammy-security/main Translation-en [233 kB]
Get:31 http://security.ubuntu.com/ubuntu jammy-security/restricted amd64 Packages [1616 kB]
Get:32 http://security.ubuntu.com/ubuntu jammy-security/restricted Translation-en [271 kB]
Get:33 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [852 kB]
Get:34 http://security.ubuntu.com/ubuntu jammy-security/universe Translation-en [163 kB]
Get:35 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 c-n-f Metadata [16.8 kB]
Get:36 http://security.ubuntu.com/ubuntu jammy-security/multiverse amd64 Packages [37.1 kB]
Get:37 http://security.ubuntu.com/ubuntu jammy-security/multiverse Translation-en [7476 B]
Get:38 http://security.ubuntu.com/ubuntu jammy-security/multiverse amd64 c-n-f Metadata [260 B]
Fetched 30.4 MB in 5s (6436 kB/s)                          
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
40 packages can be upgraded. Run 'apt list --upgradable' to see them.
ubuntu@ip-172-31-0-126:~$   curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   138  100   138    0     0    559      0 --:--:-- --:--:-- --:--:--   560
100 47.4M  100 47.4M    0     0  59.7M      0 --:--:-- --:--:-- --:--:-- 59.7M
ubuntu@ip-172-31-0-126:~$ sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
ubuntu@ip-172-31-0-126:~$ kubectl version --client
Client Version: v1.29.3
Kustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3
ubuntu@ip-172-31-0-126:~$ curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 89.3M  100 89.3M    0     0  18.4M      0  0:00:04  0:00:04 --:--:-- 20.5M
ubuntu@ip-172-31-0-126:~$ minikube start
* minikube v1.32.0 on Ubuntu 22.04 (xen/amd64)
* Unable to pick a default driver. Here is what was considered, in preference order:
* Alternatively you could install one of these drivers:
  - docker: Not installed: exec: "docker": executable file not found in $PATH
  - kvm2: Not installed: exec: "virsh": executable file not found in $PATH
  - qemu2: Not installed: exec: "qemu-system-x86_64": executable file not found in $PATH
  - podman: Not installed: exec: "podman": executable file not found in $PATH
  - virtualbox: Not installed: unable to find VBoxManage in $PATH

X Exiting due to DRV_NOT_DETECTED: No possible driver was detected. Try specifying --driver, or see https://minikube.sigs.k8s.io/docs/start/

ubuntu@ip-172-31-0-126:~$ # Add Docker's official GPG key:
sudo apt-get update
sudo apt-get install ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc

# Add the repository to Apt sources:
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
Hit:1 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy InRelease
Hit:2 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates InRelease
Hit:3 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports InRelease
Hit:4 http://security.ubuntu.com/ubuntu jammy-security InRelease
Reading package lists... Done
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
ca-certificates is already the newest version (20230311ubuntu0.22.04.1).
ca-certificates set to manually installed.
The following packages will be upgraded:
  curl libcurl4
2 upgraded, 0 newly installed, 0 to remove and 38 not upgraded.
Need to get 484 kB of archives.
After this operation, 0 B of additional disk space will be used.
Get:1 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/main amd64 curl amd64 7.81.0-1ubuntu1.16 [194 kB]
Get:2 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates/main amd64 libcurl4 amd64 7.81.0-1ubuntu1.16 [290 kB]
Fetched 484 kB in 0s (15.0 MB/s) 
(Reading database ... 65273 files and directories currently installed.)
Preparing to unpack .../curl_7.81.0-1ubuntu1.16_amd64.deb ...
Unpacking curl (7.81.0-1ubuntu1.16) over (7.81.0-1ubuntu1.15) ...
Preparing to unpack .../libcurl4_7.81.0-1ubuntu1.16_amd64.deb ...
Unpacking libcurl4:amd64 (7.81.0-1ubuntu1.16) over (7.81.0-1ubuntu1.15) ...
Setting up libcurl4:amd64 (7.81.0-1ubuntu1.16) ...
Setting up curl (7.81.0-1ubuntu1.16) ...
Processing triggers for man-db (2.10.2-1) ...
Processing triggers for libc-bin (2.35-0ubuntu3.6) ...
Scanning processes...                                                                                                                                             
Scanning linux images...                                                                                                                                          

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
Hit:1 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy InRelease
Hit:2 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-updates InRelease                        
Hit:3 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy-backports InRelease                      
Get:4 https://download.docker.com/linux/ubuntu jammy InRelease [48.8 kB]                                 
Get:5 https://download.docker.com/linux/ubuntu jammy/stable amd64 Packages [29.1 kB]                     
Hit:6 http://security.ubuntu.com/ubuntu jammy-security InRelease
Fetched 77.9 kB in 1s (147 kB/s)               
Reading package lists... Done
ubuntu@ip-172-31-0-126:~$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
The following additional packages will be installed:
  docker-ce-rootless-extras libltdl7 libslirp0 pigz slirp4netns
Suggested packages:
  aufs-tools cgroupfs-mount | cgroup-lite
The following NEW packages will be installed:
  containerd.io docker-buildx-plugin docker-ce docker-ce-cli docker-ce-rootless-extras docker-compose-plugin libltdl7 libslirp0 pigz slirp4netns
0 upgraded, 10 newly installed, 0 to remove and 38 not upgraded.
Need to get 120 MB of archives.
After this operation, 429 MB of additional disk space will be used.
Do you want to continue? [Y/n] Y
Get:1 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 pigz amd64 2.6-1 [63.6 kB]
Get:2 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/main amd64 libltdl7 amd64 2.4.6-15build2 [39.6 kB]
Get:3 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/main amd64 libslirp0 amd64 4.6.1-1build1 [61.5 kB]
Get:4 http://ap-southeast-2.ec2.archive.ubuntu.com/ubuntu jammy/universe amd64 slirp4netns amd64 1.0.1-2 [28.2 kB]
Get:5 https://download.docker.com/linux/ubuntu jammy/stable amd64 containerd.io amd64 1.6.28-2 [29.7 MB]
Get:6 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-buildx-plugin amd64 0.13.1-1~ubuntu.22.04~jammy [29.5 MB]
Get:7 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-ce-cli amd64 5:26.0.0-1~ubuntu.22.04~jammy [13.8 MB]
Get:8 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-ce amd64 5:26.0.0-1~ubuntu.22.04~jammy [25.1 MB]
Get:9 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-ce-rootless-extras amd64 5:26.0.0-1~ubuntu.22.04~jammy [9320 kB]
Get:10 https://download.docker.com/linux/ubuntu jammy/stable amd64 docker-compose-plugin amd64 2.25.0-1~ubuntu.22.04~jammy [12.1 MB]
Fetched 120 MB in 2s (67.1 MB/s)                
Selecting previously unselected package pigz.
(Reading database ... 65273 files and directories currently installed.)
Preparing to unpack .../0-pigz_2.6-1_amd64.deb ...
Unpacking pigz (2.6-1) ...
Selecting previously unselected package containerd.io.
Preparing to unpack .../1-containerd.io_1.6.28-2_amd64.deb ...
Unpacking containerd.io (1.6.28-2) ...
Selecting previously unselected package docker-buildx-plugin.
Preparing to unpack .../2-docker-buildx-plugin_0.13.1-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-buildx-plugin (0.13.1-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-ce-cli.
Preparing to unpack .../3-docker-ce-cli_5%3a26.0.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-ce-cli (5:26.0.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-ce.
Preparing to unpack .../4-docker-ce_5%3a26.0.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-ce (5:26.0.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-ce-rootless-extras.
Preparing to unpack .../5-docker-ce-rootless-extras_5%3a26.0.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-ce-rootless-extras (5:26.0.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package docker-compose-plugin.
Preparing to unpack .../6-docker-compose-plugin_2.25.0-1~ubuntu.22.04~jammy_amd64.deb ...
Unpacking docker-compose-plugin (2.25.0-1~ubuntu.22.04~jammy) ...
Selecting previously unselected package libltdl7:amd64.
Preparing to unpack .../7-libltdl7_2.4.6-15build2_amd64.deb ...
Unpacking libltdl7:amd64 (2.4.6-15build2) ...
Selecting previously unselected package libslirp0:amd64.
Preparing to unpack .../8-libslirp0_4.6.1-1build1_amd64.deb ...
Unpacking libslirp0:amd64 (4.6.1-1build1) ...
Selecting previously unselected package slirp4netns.
Preparing to unpack .../9-slirp4netns_1.0.1-2_amd64.deb ...
Unpacking slirp4netns (1.0.1-2) ...
Setting up docker-buildx-plugin (0.13.1-1~ubuntu.22.04~jammy) ...
Setting up containerd.io (1.6.28-2) ...
Created symlink /etc/systemd/system/multi-user.target.wants/containerd.service → /lib/systemd/system/containerd.service.
Setting up docker-compose-plugin (2.25.0-1~ubuntu.22.04~jammy) ...
Setting up libltdl7:amd64 (2.4.6-15build2) ...
Setting up docker-ce-cli (5:26.0.0-1~ubuntu.22.04~jammy) ...
Setting up libslirp0:amd64 (4.6.1-1build1) ...
Setting up pigz (2.6-1) ...
Setting up docker-ce-rootless-extras (5:26.0.0-1~ubuntu.22.04~jammy) ...
Setting up slirp4netns (1.0.1-2) ...
Setting up docker-ce (5:26.0.0-1~ubuntu.22.04~jammy) ...
Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service.
Created symlink /etc/systemd/system/sockets.target.wants/docker.socket → /lib/systemd/system/docker.socket.
Processing triggers for man-db (2.10.2-1) ...
Processing triggers for libc-bin (2.35-0ubuntu3.6) ...
Scanning processes...                                                                                                                                             
Scanning linux images...                                                                                                                                          

Running kernel seems to be up-to-date.

No services need to be restarted.

No containers need to be restarted.

No user sessions are running outdated binaries.

No VM guests are running outdated hypervisor (qemu) binaries on this host.
ubuntu@ip-172-31-0-126:~$ sudo docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
c1ec31eb5944: Pull complete 
Digest: sha256:53641cd209a4fecfc68e21a99871ce8c6920b2e7502df0a20671c6fccc73a7c6
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
 https://hub.docker.com/

For more examples and ideas, visit:
 https://docs.docker.com/get-started/

ubuntu@ip-172-31-0-126:~$ minikube start
* minikube v1.32.0 on Ubuntu 22.04 (xen/amd64)
* Unable to pick a default driver. Here is what was considered, in preference order:
  - docker: Not healthy: "docker version --format {{.Server.Os}}-{{.Server.Version}}:{{.Server.Platform.Name}}" exit status 1: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get "http://%2Fvar%2Frun%2Fdocker.sock/v1.45/version": dial unix /var/run/docker.sock: connect: permission denied
  - docker: Suggestion: Add your user to the 'docker' group: 'sudo usermod -aG docker $USER && newgrp docker' <https://docs.docker.com/engine/install/linux-postinstall/>
* Alternatively you could install one of these drivers:
  - kvm2: Not installed: exec: "virsh": executable file not found in $PATH
  - qemu2: Not installed: exec: "qemu-system-x86_64": executable file not found in $PATH
  - podman: Not installed: exec: "podman": executable file not found in $PATH
  - virtualbox: Not installed: unable to find VBoxManage in $PATH

X Exiting due to DRV_NOT_HEALTHY: Found driver(s) but none were healthy. See above for suggestions how to fix installed drivers.

ubuntu@ip-172-31-0-126:~$ sudo usermod -aG docker ubuntu
ubuntu@ip-172-31-0-126:~$ minikube start
* minikube v1.32.0 on Ubuntu 22.04 (xen/amd64)
* Unable to pick a default driver. Here is what was considered, in preference order:
  - docker: Not healthy: "docker version --format {{.Server.Os}}-{{.Server.Version}}:{{.Server.Platform.Name}}" exit status 1: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get "http://%2Fvar%2Frun%2Fdocker.sock/v1.45/version": dial unix /var/run/docker.sock: connect: permission denied
  - docker: Suggestion: Add your user to the 'docker' group: 'sudo usermod -aG docker $USER && newgrp docker' <https://docs.docker.com/engine/install/linux-postinstall/>
* Alternatively you could install one of these drivers:
  - kvm2: Not installed: exec: "virsh": executable file not found in $PATH
  - podman: Not installed: exec: "podman": executable file not found in $PATH
  - qemu2: Not installed: exec: "qemu-system-x86_64": executable file not found in $PATH
  - virtualbox: Not installed: unable to find VBoxManage in $PATH

X Exiting due to DRV_NOT_HEALTHY: Found driver(s) but none were healthy. See above for suggestions how to fix installed drivers.

ubuntu@ip-172-31-0-126:~$ exit
logout


--------------------------Next Login------------------------------------------------------
Welcome to Ubuntu 22.04.4 LTS (GNU/Linux 6.5.0-1014-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/pro

  System information as of Mon Apr  1 19:23:50 UTC 2024

  System load:  0.08740234375     Processes:                113
  Usage of /:   32.3% of 7.57GB   Users logged in:          0
  Memory usage: 8%                IPv4 address for docker0: 172.17.0.1
  Swap usage:   0%                IPv4 address for eth0:    172.31.0.126


Expanded Security Maintenance for Applications is not enabled.

43 updates can be applied immediately.
28 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable

Enable ESM Apps to receive additional future security updates.
See https://ubuntu.com/esm or run: sudo pro status


Last login: Mon Apr  1 19:18:08 2024 from 13.239.158.3
ubuntu@ip-172-31-0-126:~$ minikube start
* minikube v1.32.0 on Ubuntu 22.04 (xen/amd64)
* Automatically selected the docker driver. Other choices: none, ssh
* Using Docker driver with root privileges
* Starting control plane node minikube in cluster minikube
* Pulling base image ...
* Downloading Kubernetes v1.28.3 preload ...
    > gcr.io/k8s-minikube/kicbase...:  453.90 MiB / 453.90 MiB  100.00% 23.35 M
    > preloaded-images-k8s-v18-v1...:  403.35 MiB / 403.35 MiB  100.00% 17.14 M
^C
ubuntu@ip-172-31-0-126:~$ 
ubuntu@ip-172-31-0-126:~$ minikube start
* minikube v1.32.0 on Ubuntu 22.04 (xen/amd64)
* Using the docker driver based on existing profile
* Starting control plane node minikube in cluster minikube
* Pulling base image ...
* Creating docker container (CPUs=2, Memory=2200MB) ...
* Preparing Kubernetes v1.28.3 on Docker 24.0.7 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Configuring bridge CNI (Container Networking Interface) ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
ubuntu@ip-172-31-0-126:~$ kubectl get nodes
NAME       STATUS   ROLES           AGE    VERSION
minikube   Ready    control-plane   110s   v1.28.3
ubuntu@ip-172-31-0-126:~$ vi pod.yml
ubuntu@ip-172-31-0-126:~$ kubuctl create -f pod.yml
Command 'kubuctl' not found, did you mean:
  command 'kubectl' from snap kubectl (1.29.3)
See 'snap info <snapname>' for additional versions.
ubuntu@ip-172-31-0-126:~$ kubectl create -f pod.yml
pod/nginx created
ubuntu@ip-172-31-0-126:~$ kubectl get pods -o wide
NAME    READY   STATUS    RESTARTS   AGE   IP           NODE       NOMINATED NODE   READINESS GATES
nginx   1/1     Running   0          29s   10.244.0.3   minikube   <none>           <none>
ubuntu@ip-172-31-0-126:~$ minikube ssh
docker@minikube:~$ curl 10.244.0.3
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
docker@minikube:~$ kubectl delete pod nginx
